{
  ショット
}

class Shot(Actor@Actor)
  var animation : AnimationData@Animation

  func Shot(position : Main@Position, rect : Main@Rect) : @Shot
    do this.Initialize(position, rect)
    return this
  end func
end class

class ShotList()
  var shotList : Actor@List
  var animationData : AnimationData@Data
  var texture : Draw@CTex

  { 初期化 }
  func Initialize(dataPath : []char, texPath : []char)
    do this.shotList :: #Actor@List
    try
    do this.animationData :: AnimationData@Load(dataPath)
    do this.texture :: Draw@LoadTex(texPath)
    catch()
      do Dbg@Log("ERROR: Can't load shot data")
    end try
  end func

  { ショット発生 }
  func Add(position : Main@Position, velocity : Main@Vector2, category : byte32, mask : byte32, animation : int)
    var actor : @Shot :: (#@Shot).Shot(position, Main@MakeRect(-16.0, -8.0, 16.0, 8.0))
    do actor.velocity :: ##velocity
    do actor.direction.x :: velocity.x < 0.0 ?(-1.0, 1.0)
    do actor.direction.y :: 0.0
    do actor.category :: category
    do actor.collisionMask :: mask
    do actor.animation :: AnimationData@MakeAnimation(this.animationData, this.texture, animation)
    do this.shotList.Add(actor)
  end func

  { ショット移動 }
  func Action(resource : Main@Resource)
    do this.shotList.Head()
    while (!this.shotList.ChkEnd())
      var shot : @Shot :: this.shotList.Get() $ @Shot
      var result : Map@CollisionResult :: Map@Collision(shot)
      if (result.isHitX | result.isHitY)
        do this.shotList.Del()
      elif (shot.position.x < -16.0 | shot.position.x > Map@width $ float * Map@blockW)
        do this.shotList.Del()
      else
        do shot.animation.Update()
        do this.shotList.Next()
      end if
    end while
  end func

  { 描画 }
  func Draw(camera : Main@Position)
    do this.shotList.Head()
    while (!this.shotList.ChkEnd())
      var shot : @Shot :: this.shotList.Get() $ @Shot
      var x : float :: shot.position.x - camera.x
      var y : float :: shot.position.y - camera.y
      do shot.animation.Draw(x, y)
      do this.shotList.Next()
    end while
  end func

  { 衝突 }
  func Collision(rhs : Actor@List, f : func<(Actor@Actor, Actor@Actor) : Actor@List#DeletionRequest>)
    do this.shotList.Collision(rhs, f)
  end func

  { 全消去 }
  func Clear()
    do this.shotList.Head()
    while (!this.shotList.ChkEnd())
      do this.shotList.Del()
    end while
  end func
end class

{ 弾リストを作成する }
func Create(dataPath : []char, texPath : []char) : @ShotList
  var shotList : @ShotList :: #@ShotList
  do shotList.Initialize(dataPath, texPath)
  return shotList
end func

