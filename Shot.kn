{
  ショット
}

class ShotList()
  var shotList : list<Actor@Actor>

  { 初期化 }
  func Initialize()
    do this.shotList :: #list<Actor@Actor>
  end func

  { ショット発生 }
  func Add(position : Main@Position, velocity : Main@Vector2)
    var actor : Actor@Actor :: Actor@Create(position, Main@MakeRect(-16.0, -8.0, 16.0, 8.0))
    do actor.velocity :: ##velocity
    do this.shotList.Add(actor)
  end func

  { ショット移動 }
  func Action(resource : Main@Resource)
    do this.shotList.Head()
    while (!this.shotList.ChkEnd())
      var shot : Actor@Actor :: this.shotList.Get()
      var result : Map@CollisionResult :: Map@Collision(shot)
      if (result.isHitX | result.isHitY)
        do this.shotList.Del()
      elif (shot.position.x < -16.0 | shot.position.x > Map@width $ float * Map@blockW)
        do this.shotList.Del()
      else
        do this.shotList.Next()
      end if
    end while
  end func

  { 描画 }
  func Draw(camera : Main@Position)
    do this.shotList.Head()
    while (!this.shotList.ChkEnd())
      var shot : Actor@Actor :: this.shotList.Get()
      var x : float :: shot.position.x - 16.0 - camera.x
      var y : float :: shot.position.y - 8.0 - camera.y
      do Draw@Rect(x, y, 32.0, 16.0, 1.0, 0.0, 1.0, 1.0)
      do this.shotList.Next()
    end while
  end func
end class

func Create() : @ShotList
  var shotList : @ShotList :: #@ShotList
  do shotList.Initialize()
  return shotList
end func
