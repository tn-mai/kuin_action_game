{
  プレイヤー
}

const width : float :: 100.0
const height : float :: 160.0

class Player(Actor@Actor)
  const maxHp : int :: 3
  const invincibleFrames : int :: 2 * 60
  var hp : int
  var invincibleCount : int
  var animationData : AnimationData@Data
  var texture : Draw@CTex
  var animation : AnimationData@Animation
  var isLanding : bool

  func IsInvincible() : bool
    return this.invincibleCount > 0
  end func
end class

class Test()
  func Test(n : int)
  end func
end class

{ 範囲補正 }
func Correct(n : &float, min : float, max : float) : bool
  if (n < min)
    do n :: min
    return true
  elif (n > max)
    do n :: max - 1.0
    return true
  end if
  return false
end func

{ 初期化 }
func Create(x : float, y : float) : @Player
  const left : float :: -(@width * 0.8 / 2.0)
  const top : float :: -(@height * 0.9)
  const right : float :: @width * 0.8 / 2.0
  const bottom : float :: 0.0
  var player : @Player :: #@Player
  do player.Initialize(Main@MakePosition(x, y), Main@MakeRect(left, top, right, bottom))
  do player.hp :: @Player#maxHp
  do player.invincibleCount :: 0
  try
  do player.animationData :: AnimationData@Load("player.knanm")
  do player.texture :: Draw@LoadTex(player.animationData.textureName)
  do player.animation :: AnimationData@MakeAnimation(player.animationData, player.texture, AnimationData@Action#StopR $ int)
  catch()
    do Dbg@Log("ERROR: Can't load player data")
  end try
  return player
end func

{ 操作 }
func Action(resource : Main@Resource, actor : @Player, shotList : Shot@ShotList)
  { 左右移動 }
  const runVelocity : float :: 2.0
  const maxRunVelocity : float :: 16.0
  var animationIndex : AnimationData@Action :: actor.animation.index $ AnimationData@Action
  var velocity : Main@Vector2 :: ##actor.velocity
  if (Input@Pad(0, Input@EBtn#Left) > 0)
    do actor.direction :: Main@MakeVector2(-1.0, 0.0)
    do velocity.x :- runVelocity
    if (velocity.x < -maxRunVelocity)
      do velocity.x :: -maxRunVelocity
    end if
    do animationIndex :: AnimationData@Action#RunL
  elif (Input@Pad(0, Input@EBtn#Right) > 0)
    do actor.direction :: Main@MakeVector2(1.0, 0.0)
    do velocity.x :+ runVelocity
    if (velocity.x > maxRunVelocity)
      do velocity.x :: maxRunVelocity
    end if
    do animationIndex :: AnimationData@Action#RunR
  else
    if (velocity.x > 0.0)
      do velocity.x :- runVelocity
      if (velocity.x < 0.0)
        do velocity.x :: 0.0
      end if
    elif (velocity.x < 0.0)
      do velocity.x :+ runVelocity
      if (velocity.x < 0.0)
        do velocity.x :: 0.0
      end if
    end if
    if (velocity.x.Abs() < 0.01)
      do animationIndex :: animationIndex $ int % 2 = 0 ?(AnimationData@Action#StopL, AnimationData@Action#StopR)
    end if
  end if

  { ジャンプ }
  if (actor.isLanding & Input@Pad(0, Input@EBtn#B) = 1)
    var jumpPower : float :: -15.0 * Lib@Sqrt(2.0 * Main@gravity)
    do velocity.y :: jumpPower
    do SE@Play(Main@SEID#Landing $ int)
  end if

  { ショット }
  if (Input@Pad(0, Input@EBtn#C) = 1)
    var pos : Main@Position :: ##actor.position
    if (Input@Pad(0, Input@EBtn#Down) > 0)
      do pos.y :- (actor.rect.bottom - actor.rect.top) * 0.2
      do shotList.Add(pos, (#Main@Vector2).Vector2(0.0, 32.0), CollisionGroup@categoryPlayerShot, CollisionGroup@maskPlayerShot, AnimationData@Action#ShotD $ int)
    elif (Input@Pad(0, Input@EBtn#Up) > 0)
      do pos.y :- (actor.rect.bottom - actor.rect.top) * 0.9
      do shotList.Add(pos, (#Main@Vector2).Vector2(0.0, -32.0), CollisionGroup@categoryPlayerShot, CollisionGroup@maskPlayerShot, AnimationData@Action#ShotU $ int)
    else
      do pos.y :- (actor.rect.bottom - actor.rect.top) * 0.8
      var animationId : int :: (actor.direction.x < 0.0 ?(AnimationData@Action#ShotL, AnimationData@Action#ShotR)) $ int
      do shotList.Add(pos, (##actor.direction).MulScalar(32.0), CollisionGroup@categoryPlayerShot, CollisionGroup@maskPlayerShot, animationId)
    end if
    do SE@Play(Main@SEID#PlayerShot $ int)
  end if
  { 重力制御 }
  do velocity.y  :+ Main@gravity
  const topLimit : float :: -@height
  const bottomLimit : float :: Map@height $ float * Map@blockH + @height - 10.0
  if (@Correct(&actor.position.y, topLimit, bottomLimit))
    do actor.velocity.y  :: 0.0
  end if

  do actor.velocity :: velocity

  var result : Map@CollisionResult :: Map@Collision(actor)
  do actor.isLanding :: result.isHitY

  const leftLimit : float :: @width / 2.0
  const rightLimit : float :: Map@width $ float * Map@blockW - @width / 2.0
  do @Correct(&actor.position.x, leftLimit, rightLimit)

  if (!result.isHitY)
    if (actor.velocity.y > 0.0) 
      do animationIndex :: actor.direction.x < 0.0 ?(AnimationData@Action#JumpL, AnimationData@Action#JumpR)
    else
      do animationIndex :: actor.direction.x < 0.0 ?(AnimationData@Action#FallL, AnimationData@Action#FallR)
    end if
  elif (animationIndex <> AnimationData@Action#RunL & animationIndex <> AnimationData@Action#RunR)
    do animationIndex :: actor.direction.x < 0.0 ?(AnimationData@Action#StopL, AnimationData@Action#StopR)
  end if
  if (animationIndex $ int = actor.animation.index)
    do actor.animation.Update()
  else
    do actor.animation.Set(animationIndex $ int)
  end if

  if (actor.invincibleCount > 0)
    do actor.invincibleCount :- 1
  end if
end func

{ 描画 }
func Draw(actor : @Player, camera : Main@Position)
  if (actor.invincibleCount % 2 = 0)
    var x : float :: actor.position.x - camera.x
    var y : float :: actor.position.y - camera.y
    do actor.animation.Draw(x, y)
  end if
end func
