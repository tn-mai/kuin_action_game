{
  動的物体
}

{ 範囲補正 }
-func CorrectInt(n : &int, min : int, max : int) : bool
  if (n < min)
    do n :: min
    return true
  elif (n >= max)
    do n :: max - 1
    return true
  end if
  return false
end func

-func HasCollision(a0 : float, a1 : float, b0 : float, b1 : float) : bool
  { a0 b0 a1 }
  if (a0 < b0 & a1 >= b0)
    return true
  { a0 b1 a1 }
  elif (a0 < b1 & a1 >= b1)
    return true
  { b0 a0 a1 b1 }
  elif (b0 < a0 & a1 <= b1)
    return true
  else
    return false
  end if
end func

{ 動く物体の基本クラス }
class Actor()
  var position : Main@Position
  var rect : Main@Rect
  var velocity : Main@Vector2
  var direction : Main@Vector2
  var color : Main@ColorRGBA

  func Initialize(position : Main@Position, rect : Main@Rect)
    do this.position :: ##position
    do this.rect :: ##rect
    do this.velocity :: #Main@Vector2
    do this.direction :: Main@MakeVector2(1.0, 0.0)
    do this.color :: Main@MakeColorRGBA(0.5, 0.5, 0.5, 1.0)
  end func

  func Draw(position : Main@Position)
    var x : float :: this.position.x + this.rect.left - position.x
    var y : float :: this.position.y + this.rect.top - position.y
    var w : float :: this.rect.right - this.rect.left
    var h : float :: this.rect.bottom - this.rect.top
    do Draw@Rect(x, y, w, h, this.color.r, this.color.g, this.color.b, this.color.a)
  end func

  func GetHitLeft(width : int, blockSize : float) : int
    var n : int :: ((this.position.x + this.rect.left) / Map@blockW) $ int
    do @CorrectInt(&n, 0, Map@width)
    return n
  end func

  func GetHitTop(height : int, blockSize : float, offset : float) : int
    var n : int :: ((this.position.y + this.rect.top + offset ) / Map@blockH) $ int
    do @CorrectInt(&n, 0, Map@height)
    return n
  end func

  func GetHitRight(width : int, blockSize : float) : int
    var n : int :: ((this.position.x + this.rect.right) / Map@blockW) $ int
    do @CorrectInt(&n, 0, Map@width)
    return n
  end func

  func GetHitBottom(height : int, blockSize : float, offset : float) : int
    var n : int :: ((this.position.y + this.rect.bottom + offset) / Map@blockH) $ int
    do @CorrectInt(&n, 0, Map@height)
    return n
  end func
end class

func Create(position : Main@Position, rect : Main@Rect) : @Actor
  var actor : @Actor :: #@Actor
  do actor.Initialize(position, rect)
  return actor
end func

{ 動的物体リスト }
class List()
  var actorList : list<@Actor>

  -+func Ctor()
    do this.actorList :: #list<@Actor>
  end func

  { 走査が指している要素を取得する. }
  func Get() : @Actor
    return this.actorList.Get()
  end func
  { 要素を末尾に追加する. }
  func Add(actor : @Actor)
    do this.actorList.Add(actor)
  end func
  { 走査が指している要素を削除する. }
  func Del()
    do this.actorList.Del()
  end func
  { 走査位置を先頭に設定する. }
  func Head()
    do this.actorList.Head()
  end func
  { 走査位置を次に移動する. }
  func Next()
    do this.actorList.Next()
  end func
  { 走査が終端を超えた時にtrueを返す. }
  func ChkEnd() : bool
    return this.actorList.ChkEnd()
  end func

  {
    削除する弾の選択
    Collision()の衝突発生時コールバックの戻り値.
    衝突によって削除される要素を選択.
  }
  enum DeletionRequest
    None { どちらも削除しない. }
    Left { 左側要素のみ削除. }
    Right { 右側要素のみ削除. }
    Both { 両方の要素を削除. }
  end enum

  { 弾同士の当たり判定 }
  func Collision(rhs : @List, f : func<(@Actor, @Actor) : DeletionRequest>)
    do this.actorList.Head()
    while l(!this.actorList.ChkEnd())
      var left : @Actor :: this.actorList.Get()
      var rectL : Main@Rect :: (##left.rect).AddPosition(left.position)
      do rhs.actorList.Head()
      while r(!rhs.actorList.ChkEnd())
        var right : @Actor :: rhs.actorList.Get()
        var rectR : Main@Rect :: (##right.rect).AddPosition(right.position)
        if (!@HasCollision(rectL.left, rectL.right, rectR.left, rectR.right))
          do rhs.actorList.Next()
          continue r
        elif (!@HasCollision(rectL.top, rectL.bottom, rectR.top, rectR.bottom))
          do rhs.actorList.Next()
          continue r
        end if
        switch (f(left, right))
        case (DeletionRequest#None)
          do rhs.actorList.Next()
        case (DeletionRequest#Left)
          do this.actorList.Del()
          continue l
        case (DeletionRequest#Right)
          do rhs.actorList.Del()
          continue r
        case (DeletionRequest#Both)
          do this.actorList.Del()
          do rhs.actorList.Del()
          continue l
        end switch
      end while
      do this.actorList.Next()
    end while
  end func
end class

