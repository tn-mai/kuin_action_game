{
  Kuin game
}

const isInvinsible : bool :: false

{ 重力定数 }
const gravity : float :: 9.8 * 10.0 / 60.0

{ RBGAカラー }
class ColorRGBA()
  var r : float
  var g : float
  var b : float
  var a : float

  func ColorRGBA(r : float, g : float, b : float, a : float) : @ColorRGBA
    do this.r :: r
    do this.g :: g
    do this.b :: b
    do this.a :: a
    return this
  end func
end class

func MakeColorRGBA(r : float, g : float, b : float, a : float) : @ColorRGBA
  var c : @ColorRGBA :: #@ColorRGBA
  do c.r :: r
  do c.g :: g
  do c.b :: b
  do c.a :: a
  return c
end func

func SetColorRGBA(c : &@ColorRGBA, r : float, g : float, b : float, a : float)
  do c.r :: r
  do c.g :: g
  do c.b :: b
  do c.a :: a
end func

{ 一次元範囲 }
class RangeInt()
  var first : int
  var last : int
  func ToStr() : []char
    return "(" ~ this.first.ToStr() ~ "," ~ this.last.ToStr() ~ ")"
  end func
end class

func MakeRangeInt(first : int, last : int) : @RangeInt
  var range : @RangeInt :: #@RangeInt
  do range.first :: first
  do range.last :: last
  return range
end func

{ 二次元座標 }
class Position()
  var x : float
  var y : float
  { 文字列化 }
  func ToStr() : []char
    return "(" ~ this.x.ToStr() ~ "," ~ this.y.ToStr() ~ ")"
  end func
  { 値設定 }
  func Position( x : float, y : float) : @Position
    do this.x :: x
    do this.y :: y
    return this
  end func
  { 値設定 }
  func Assign(v : @Position)
    do this.x :: v.x
    do this.y :: v.y
  end func
  { 加算 }
  func Add(v : @Vector2) : @Position
    do this.x :+ v.x
    do this.y :+ v.y
    return this
  end func
  { 減算 }
  func Sub(v : @Position) : @Vector2
    return (#@Vector2).Vector2(this.x - v.x, this.y - v.y)
  end func
end class

func MakePosition(x : float, y : float) : @Position
  var pos : @Position :: #@Position
  do pos.x :: x
  do pos.y :: y
  return pos
end func

class Vector2()
  var x : float
  var y : float

  func Vector2(x : float, y : float) : @Vector2
    do this.x :: x
    do this.y :: y
    return this
  end func
  { 文字列変換 }
  func ToStr() : []char
    return "(" ~ this.x.ToStr() ~ "," ~ this.y.ToStr() ~ ")"
  end func
  { 値設定 }
  func Assign(v : @Vector2)
    do this.x :: v.x
    do this.y :: v.y
  end func
  func Set(x : float, y : float)
    do this.x :: x
    do this.y :: y
  end func
  { 加算 }
  func Add(v : @Vector2) : @Vector2
    do this.x :+ v.x
    do this.y :+ v.y
    return this
  end func
  { 減算 }
  func Sub(v : @Vector2) : @Vector2
    do this.x :- v.x
    do this.y :- v.y
    return this
  end func
  { 乗算 }
  func MulVector(v : @Vector2) : @Vector2
    do this.x :* v.x
    do this.y :* v.y
    return this
  end func
  func MulScalar(n : float) : @Vector2
    do this.x :* n
    do this.y :* n
    return this
  end func
end class

func MakeVector2(x : float, y : float) : @Vector2
  var v : @Vector2 :: #@Vector2
  do v.x :: x
  do v.y :: y
  return v
end func

{ 二次元矩形範囲 }
class Rect()
  var left : float
  var top : float
  var right : float
  var bottom : float

  func Rect(left : float, top : float, right : float, bottom : float) : @Rect
    do this.left :: left
    do this.top :: top
    do this.right :: right
    do this.bottom :: bottom
    return this
  end func
  func Assign(r : @Rect)
    do this.left :: r.left
    do this.top :: r.top
    do this.right :: r.right
    do this.bottom :: r.bottom
  end func

  func ToStr() : []char
    return "(" ~ this.left.ToStr() ~ "," ~ this.top.ToStr() ~ "," ~ this.right.ToStr() ~ "," ~ this.bottom.ToStr() ~ ")"
  end func

  func AddPosition(pos : @Position) : @Rect
    do this.left :+ pos.x
    do this.top :+ pos.y
    do this.right :+ pos.x
    do this.bottom :+ pos.y
    return this
  end func
end class

func MakeRect(left : float, top : float, right : float, bottom : float) : @Rect
  return (#@Rect).Rect(left, top, right, bottom)
end func

class RectInt()
  var left : int
  var top : int
  var right : int
  var bottom : int

  func ToStr() : []char
    return "(" ~ this.left.ToStr() ~ "," ~ this.top.ToStr() ~ "," ~ this.right.ToStr() ~ "," ~ this.bottom.ToStr() ~ ")"
  end func
end class

func MakeRectInt(left : int, top : int, right : int, bottom : int) : @RectInt
  var rect : @RectInt :: #@RectInt
  do rect.left :: left
  do rect.top :: top
  do rect.right :: right
  do rect.bottom :: bottom
  return rect
end func

{ 符号取得 }
func Sign( n : float) : float
  if (n > 0.0)
    return 1.0
  elif (n < 0.0)
    return -1.0
  end if
  return 0.0
end func

{
  ゲーム結果
}
enum Result
  StageClear { ステージクリア }
  GameOver  { ゲームオーバーになった }
  Ending    { エンディングになった }
end enum

{
  ゲーム状態
}
class Status()
  var result: @Result
  func Init()
    do this.result :: @Result#GameOver
  end func
end class

enum AsciiFontEdge
  None
  Edge
end enum

{
  リソース
}
class Resource()
  var font : Draw@CFont
  var asciiTex : Draw@CTex

  func Init()
    try
    do this.font :: Draw@LoadFont("ume-ugo5.ttf")
    catch()
      do Dbg@Log("ERROR in Resource@Init(): Can't load font")
    end try
    try
    do this.asciiTex:: Draw@LoadTex("ascii.kntex")
    catch()
      do Dbg@Log("ERROR in Resource@Init(): Can't load texture font")
    end try
  end func
  func Font() : Draw@CFont
    return this.font
  end func
  func DrawAscii(x : float, y : float, scale : float, edge : @AsciiFontEdge, text : []char)
    const width : float :: 32.0
    const height : float :: 64.0
    if (this.asciiTex =& null)
      return
    end if
    var offsetY : float :: (edge = @AsciiFontEdge#Edge) ?(512.0, 0.0)
    foreach i(text)
      var left : float :: ((i $ int % 16) * 32) $ float
      var top : float :: ((i $ int / 16) * 64) $ float + offsetY
      do this.asciiTex.DrawScale(left, top, 32.0, 64.0, x, y, 32.0 * scale, 64.0 * scale, 1.0, 1.0, 1.0, 1.0)
      do x :+ 32.0 * scale
    end foreach
  end func
end class

{ 簡易フォント描画 }
func DrawText(resource : @Resource, text : []char, size : int, x : int, y : int)
  var texture : Draw@CTex :: resource.Font().MakeTex(size, text, 16)
  do texture.Draw(0.0, 0.0, texture.Width(), texture.Height(), x $ float, y $ float, 1.0, 1.0, 1.0, 1.0)
end func

{ キー解除待ち }
func WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) > 0)
    do Kuin@Act()
  end while
end func

{
  パフォーマンスカウンタ
}
class Perf()
  var offset : int
  var times : []int
  var colors : []@ColorRGBA
  -+func Ctor()
    do this.offset :: 0
    do this.times :: #[16]int
    do this.colors :: #[16]@ColorRGBA
    for i(0, 15)
      do this.colors[i] :: #@ColorRGBA
    end for
  end func
  func Init()
    do this.times[0] :: Time@Sys()
    do this.offset :: 1
  end func
  func Set(color : @ColorRGBA)
    if (this.offset >= 16)
      return
    end if
    do this.times[this.offset] :: Time@Sys()
    do this.colors[this.offset] :: color
    do this.offset :+ 1
  end func
  func Draw(x : float, y : float, w : float, h : float, resource : @Resource)
    const unitFrame : float :: 1000.0 / 60.0
    var left : float :: x
    for i(1, this.offset - 1)
      var unit : int :: this.times[i] - this.times[i - 1]
      var len : float :: (w * unit $ float) / unitFrame
      var col : @ColorRGBA :: this.colors[i]
      do Draw@Rect(left, y, len, h, col.r, col.g, col.b, col.a)
      do left :+ len
    end for
    do Draw@Rect(left, y, w - left, h, 1.0, 1.0, 1.0, 0.25)
    do resource.DrawAscii(x, y, 0.5, @AsciiFontEdge#Edge, Kuin@FPS().ToStr())
  end func
end class


enum SEID
  Run
  Landing
  PlayerShot
  EnemyShot
  Slash
  Dead
  ShotCollision
end enum

var score : int
var stage : int

{
 エントリポイント
}
func Main()
  var status : @Status :: #@Status
  do status.Init()
  var resource : @Resource :: #@Resource
  do resource.Init()
  do SE@Initialize()
  do SE@Load("run.ogg", true)
  do SE@Load("landing.ogg", false)
  do SE@Load("playershot.ogg", false)
  do SE@Load("enemyshot.ogg", false)
  do SE@Load("slash.ogg", false)
  do SE@Load("slashdead.ogg", false)
  do SE@Load("shotcollision.ogg", false)

  while ()
    do @Title(resource, status)
    do @stage :: 1
    do @score :: 0
    while loop()
      switch (@Game(resource, status))
      case (@Result#StageClear)
        do @stage :+ 1
      case (@Result#Ending)
        do @Ending(resource, status)
      default
        do @GameOver(resource, status)
        break loop
      end switch
    end while
  end while
end func 

{
  タイトル画面
}
func Title(resource : @Resource, status : @Status)
  do @WaitForKeyReleased()
  do BGM@PlayFade("bgm01.ogg", 0.0, 0.12, 30)
  while (Input@Pad(0, Input@EBtn#A) = 0)
    do @DrawText(resource, "NINJA TITLE", 100, 0, 0)
    do Kuin@Act()
  end while
end func

{ カメラ制御 }
class Camera()
  var position : @Position
  var target : @Position
  var offset : @Vector2
  var limit : @Rect

  -+func Ctor()
    do this.position :: #@Position
    do this.target :: #@Position
    do this.offset :: #@Vector2
    do this.limit :: #@Rect
  end func

  func Camera(pos : @Position, offset : @Vector2, limit : @Rect) : @Camera
    do this.position.Assign(pos)
    do this.target.Assign(pos)
    do this.offset.Assign(offset)
    do this.limit.Assign(limit)
    return this
  end func

  func SetPosition(pos : @Position)
    do this.position.Assign(pos)
  end func

  func SetTarget(target : @Position)
    do this.target.Assign(target)
    do this.target.Add(this.offset)
    if (this.target.x < this.limit.left)
      do this.target.x :: this.limit.left
    end if
    if (this.target.x > this.limit.right)
      do this.target.x :: this.limit.right
    end if
    if (this.target.y < this.limit.top)
      do this.target.y :: this.limit.top
    end if
    if (this.target.y > this.limit.bottom)
      do this.target.y :: this.limit.bottom
    end if
  end func

  func Update()
    const speed : float :: 24.0
    var vec : @Vector2 :: this.target.Sub(this.position)
    var distance : float :: Lib@Hypot(vec.x, vec.y)
    if (distance.Abs() < speed)
      do this.position.Assign(this.target)
      return
    end if
    do vec.MulScalar(speed / distance)
    do this.position.Add(vec)
  end func
end class

{
  ゲーム
}
var restEnemy : int

func Game(resource : @Resource, status : @Status) : @Result
  { プレイヤー弾と敵弾が衝突したときの処理 }
  func ShotCollision(left : Actor@Actor, right : Actor@Actor) : Actor@List#DeletionRequest
    do SE@Play(@SEID#ShotCollision $ int)
    return Actor@List#DeletionRequest#Both
  end func
  { プレイヤー弾と敵が衝突したときの処理 }
  func EnemyCollision(left : Actor@Actor, right : Actor@Actor) : Actor@List#DeletionRequest
    do @score :+ 100
    if (@restEnemy > 0)
      do @restEnemy :- 1
    end if
    do (right $ Enemy@Enemy).Damaged()
    return Actor@List#DeletionRequest#Left
  end func
  { プレイヤーと敵弾が衝突した時の処理 }
  func PlayerHitEnemyShot(left : Actor@Actor, right : Actor@Actor) : Actor@List#DeletionRequest
    if (@isInvinsible)
      return Actor@List#DeletionRequest#None
    end if
    var player : Player@Player :: left $ Player@Player
    if (player.hp > 0)
      do player.hp :- 1
      do player.invincibleCount :: Player@Player#invincibleFrames
      do SE@Play(@SEID#Slash $ int)
    end if
    return Actor@List#DeletionRequest#Right
  end func
  { プレイヤーと敵が衝突した時の処理 }
  func PlayerHitEnemy(left : Actor@Actor, right : Actor@Actor) : Actor@List#DeletionRequest
    if (@isInvinsible)
      return Actor@List#DeletionRequest#None
    end if
    var player : Player@Player :: left $ Player@Player
    if (player.hp > 0)
      do player.hp :- 1
      do player.invincibleCount :: Player@Player#invincibleFrames
      do SE@Play(@SEID#Slash $ int)
    end if
    return Actor@List#DeletionRequest#None
  end func
  { プレイヤー体力の描画 }
  func DrawPlayerHp(player : Player@Player)
    for i(0, player.hp - 1)
      const unitWidth : float :: 70.0
      const margin : float :: 10.0
      var left : float :: 10.0 + (unitWidth + margin) * (i $ float)
      do Draw@Rect(left, 10.0, unitWidth, 40.0, 0.5, 1.0, 0.5, 1.0)
    end for
  end func

  do @WaitForKeyReleased()

  var perf : @Perf :: #@Perf
  var perfColPlayerAct     : @ColorRGBA :: @MakeColorRGBA(1.0, 0.0, 0.0, 0.8)
  var perfColEnemyAct      : @ColorRGBA :: @MakeColorRGBA(0.0, 1.0, 0.0, 0.8)
  var perfColMapDraw       : @ColorRGBA :: @MakeColorRGBA(0.0, 0.0, 1.0, 0.8)
  var perfColCharacterDraw : @ColorRGBA :: @MakeColorRGBA(1.0, 1.0, 0.0, 0.8)
  var perfColOtherDraw     : @ColorRGBA :: @MakeColorRGBA(1.0, 0.0, 1.0, 0.8)

  var player : Player@Player :: Player@Create(300.0, 800.0)
  do player.invincibleCount :: Player@Player#invincibleFrames
  do player.category :: CollisionGroup@categoryPlayer
  do player.collisionMask :: CollisionGroup@maskPlayer
  var playerList : Actor@List :: #Actor@List
  do playerList.Add(player)

  var playerShotList : Shot@ShotList :: Shot@Create("playershot.knanm", "player.kntex")

  var enemyShotList : Shot@ShotList :: Shot@Create("enemyshot.knanm", "player.kntex")
  var enemyList : Enemy@EnemyList :: Enemy@Create()

  var background : Draw@CTex :: Draw@LoadTex("sunset.kntex")
  do Map@InitMap()

  { カメラ設定 }
  const cameraTargetDistanceX : float :: 200.0
  const cameraTargetDistanceY : float :: -100.0
  const leftLimit : float :: 0.0
  const topLimit : float :: 0.0
  const rightLimit : float :: (Map@width $ float) * Map@blockW - Map@viewW
  const bottomLimit : float :: (Map@height$ float) * Map@blockH - Map@viewH
  var cameraPosition : @Position :: (#@Position).Position(0.0, 0.0)
  var cameraOffset : @Vector2 :: (#@Vector2).Vector2(-(Map@viewW / 2.0), -(Map@viewH / 2.0))
  var camera : @Camera :: (#@Camera).Camera(cameraPosition, cameraOffset, (#@Rect).Rect(leftLimit, topLimit, rightLimit, bottomLimit))
  var cameraTarget : @Position :: ##player.position
  do cameraTarget.x :+ cameraTargetDistanceX * player.direction.x
  do camera.SetTarget(cameraTarget)

  do @restEnemy :: 10 + 3 * (@stage - 1)

  func AddEnemy(enemyList : Enemy@EnemyList)
    var x : int :: Rnd@Get(1, Map@width - 1)
    var y : int :: Rnd@Get(1, Map@height - 2)
    while (Map@GetChip(x, y) <> '.' | Map@GetChip(x, y - 1) <> '.')
      if (y < 0)
        do Dbg@Log("WARNING: can't respawn(" ~ x.ToStr() ~ "," ~ y.ToStr() ~ ")")
        do x :: Rnd@Get(1, Map@width - 1)
        do y :: Rnd@Get(1, Map@height- 2)
      end if
      do y :- 1
    end while
    do enemyList.Add(@MakePosition((x $ float + 0.5) * Map@blockW , (y $ float + 0.5) * Map@blockH))
  end func

  for i(0, 5)
    do AddEnemy(enemyList)
  end for

  const enemyCount : int :: 600 { 敵発生間隔(フレーム数) }
  var enemyCounter : int :: enemyCount { 敵発生間隔カウンタ }

  do BGM@PlayFade("syakuhachi.ogg", 0.0, 0.0, 30)

  var stageClearEffectCount : int :: 0
  while mainLoop()
    do perf.Init()

    if (stageClearEffectCount = 0)
      do Player@Action(resource, player, playerShotList)
      do playerShotList.Action(resource)
      do playerShotList.Collision(enemyShotList.shotList, ShotCollision)
      do playerShotList.Collision(enemyList.enemyList, EnemyCollision)

      do perf.Set(perfColPlayerAct)

      do enemyList.Action(resource, player, enemyShotList)
      do enemyShotList.Action(resource)
      if (!player.IsInvincible())
        do playerList.Collision(enemyShotList.shotList, PlayerHitEnemyShot)
        do playerList.Collision(enemyList.enemyList, PlayerHitEnemy)
      end if

      var cameraTarget : @Position :: ##player.position
      do cameraTarget.x :+ cameraTargetDistanceX * player.direction.x
      do cameraTarget.y :+ cameraTargetDistanceY
      do camera.SetTarget(cameraTarget)
      do camera.Update()

      var maxActiveEnemy : int :: @stage < 13 ?(7 + @stage, 20)
      var capacity : int :: @restEnemy - enemyList.Len() > maxActiveEnemy ?(maxActiveEnemy, @restEnemy - enemyList.Len())
      if (@restEnemy - enemyList.Len() > 0 & enemyCounter <= 0)
        do enemyCounter :: 10 * 60
        var minAddition : int :: @restEnemy < 2 ?(@restEnemy, 2)
        if (minAddition > capacity)
          do minAddition :: capacity
        end if
        var maxAddition : int :: @restEnemy > 2 + @stage ?(2 + @stage, @restEnemy)
        if (maxAddition > capacity)
          do maxAddition :: capacity
        end if
        var additionCount : int :: Rnd@Get(minAddition, maxAddition)
        for (1, additionCount)
          do AddEnemy(enemyList)
        end for
      elif (enemyCounter > 0)
        do enemyCounter :- 1
      end if

      do perf.Set(perfColEnemyAct)
    end if

    do background.DrawScale(0.0, 0.0, 1024.0, 512.0, 0.0, 0.0, 1600.0, 900.0, 1.0, 1.0, 1.0, 1.0)
    do Map@DrawMap(camera.position)

    do perf.Set(perfColMapDraw)

    do enemyList.Draw(camera.position)
    do Player@Draw(player, camera.position)
    do playerShotList.Draw(camera.position)
    do enemyShotList.Draw(camera.position)

    do perf.Set(perfColCharacterDraw)

    do DrawPlayerHp(player)
    do resource.DrawAscii(1300.0, 10.0, 1.0, @AsciiFontEdge#Edge, "STAGE:" ~ @stage.ToStrF("3d"))
    do resource.DrawAscii(900.0, 10.0, 1.0, @AsciiFontEdge#Edge, "ENEMY:" ~ @restEnemy.ToStrF("4d"))
    do resource.DrawAscii(400.0, 10.0, 1.0, @AsciiFontEdge#Edge, @score.ToStr())

    do perf.Set(perfColOtherDraw)
    do perf.Draw(20.0, 820.0, 400.0, 40.0, resource)

    if (@restEnemy <= 0 & enemyList.Len() <= 0)
      do stageClearEffectCount :+ 1
      if (stageClearEffectCount > 2 * 60)
        do @score :+ player.hp * 1000
        return @Result#StageClear
      end if
      do Draw@Rect(0.0, 0.0, 1600.0, 900.0, 0.0, 0.0, 0.0, stageClearEffectCount < 60 ?(stageClearEffectCount $ float / 60.0, 1.0))
      do resource.DrawAscii((1600.0 - 14.0 * 32.0 * 2.0) / 2.0, 300.0, 2.0, @AsciiFontEdge#Edge, "STAGE " ~ @stage.ToStrF("2d") ~ " CLEAR")
      do resource.DrawAscii((1600.0 - 512.0) / 2.0, 600.0, 1.0, @AsciiFontEdge#Edge, "LIFE BONUS: " ~ (player.hp * 1000).ToStrF("4d"))
    end if

    if (player.hp <= 0)
      break mainLoop
    end if
    do Kuin@Act()
  end while
  return @Result#GameOver
end func

{
  ゲームオーバー
}
func GameOver(resource : @Resource, status : @Status)
  do BGM@StopFade(30)
  do @WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) = 0)
    do @DrawText(resource, "GAME OVER", 100, 0, 0)
    do Kuin@Act()
  end while
end func

{
  ゲームクリア→エンディング
}
func Ending(resource : @Resource, status : @Status)
  do @WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) = 0)
    do @DrawText(resource, "Ending", 100, 0, 0)
    do Kuin@Act()
  end while
end func

