{
  Kuin game
}

{ 重力定数 }
const gravity : float :: 9.8 * 10.0 / 60.0

{ RBGAカラー }
class ColorRGBA()
  var r : float
  var g : float
  var b : float
  var a : float
end class

func MakeColorRGBA(r : float, g : float, b : float, a : float) : @ColorRGBA
  var c : @ColorRGBA :: #@ColorRGBA
  do c.r :: r
  do c.g :: g
  do c.b :: b
  do c.a :: a
  return c
end func

func SetColorRGBA(c : &@ColorRGBA, r : float, g : float, b : float, a : float)
  do c.r :: r
  do c.g :: g
  do c.b :: b
  do c.a :: a
end func

{ 一次元範囲 }
class RangeInt()
  var first : int
  var last : int
  func ToStr() : []char
    return "(" ~ this.first.ToStr() ~ "," ~ this.last.ToStr() ~ ")"
  end func
end class

func MakeRangeInt(first : int, last : int) : @RangeInt
  var range : @RangeInt :: #@RangeInt
  do range.first :: first
  do range.last :: last
  return range
end func

{ 二次元座標 }
class Position()
  var x : float
  var y : float
  func ToStr() : []char
    return "(" ~ this.x.ToStr() ~ "," ~ this.y.ToStr() ~ ")"
  end func
  { 加算 }
  func Add(v : @Vector2) : @Position
    do this.x :+ v.x
    do this.y :+ v.y
    return this
  end func
  { 減算 }
  func Sub(v : @Position) : @Position
    do this.x :- v.x
    do this.y :- v.y
    return this
  end func
end class

func MakePosition(x : float, y : float) : @Position
  var pos : @Position :: #@Position
  do pos.x :: x
  do pos.y :: y
  return pos
end func

class Vector2()
  var x : float
  var y : float
  { 文字列変換 }
  func ToStr() : []char
    return "(" ~ this.x.ToStr() ~ "," ~ this.y.ToStr() ~ ")"
  end func
  { 加算 }
  func Add(v : @Vector2) : @Vector2
    do this.x :+ v.x
    do this.y :+ v.y
    return this
  end func
  { 減算 }
  func Sub(v : @Vector2) : @Vector2
    do this.x :- v.x
    do this.y :- v.y
    return this
  end func
  { 乗算 }
  func MulVector(v : @Vector2) : @Vector2
    do this.x :* v.x
    do this.y :* v.y
    return this
  end func
  func MulScalar(n : float) : @Vector2
    do this.x :* n
    do this.y :* n
    return this
  end func
end class

func MakeVector2(x : float, y : float) : @Vector2
  var v : @Vector2 :: #@Vector2
  do v.x :: x
  do v.y :: y
  return v
end func

{ 二次元矩形範囲 }
class Rect()
  var left : float
  var top : float
  var right : float
  var bottom : float

  func ToStr() : []char
    return "(" ~ this.left.ToStr() ~ "," ~ this.top.ToStr() ~ "," ~ this.right.ToStr() ~ "," ~ this.bottom.ToStr() ~ ")"
  end func

  func Add(pos : @Position) : @Rect
    var rect : @Rect :: ##this
    do rect.left :+ pos.x
    do rect.top :+ pos.y
    do rect.right :+ pos.x
    do rect.bottom :+ pos.y
    return rect
  end func
end class

func MakeRect(left : float, top : float, right : float, bottom : float) : @Rect
  var rect : @Rect :: #@Rect
  do rect.left :: left
  do rect.top :: top
  do rect.right :: right
  do rect.bottom :: bottom
  return rect
end func

class RectInt()
  var left : int
  var top : int
  var right : int
  var bottom : int

  func ToStr() : []char
    return "(" ~ this.left.ToStr() ~ "," ~ this.top.ToStr() ~ "," ~ this.right.ToStr() ~ "," ~ this.bottom.ToStr() ~ ")"
  end func
end class

func MakeRectInt(left : int, top : int, right : int, bottom : int) : @RectInt
  var rect : @RectInt :: #@RectInt
  do rect.left :: left
  do rect.top :: top
  do rect.right :: right
  do rect.bottom :: bottom
  return rect
end func

{
  ゲーム結果
}
enum Result
  GameOver  { ゲームオーバーになった }
  Ending    { エンディングになった }
end enum

{
  ゲーム状態
}
class Status()
  var result: @Result
  func Init()
    do this.result :: @Result#GameOver
  end func
end class

{
  リソース
}
class Resource()
  func Init()
    do @font :: Draw@LoadFont("ume-ugo5.ttf")
  end func
  func Font() : Draw@CFont
    return @font
  end func
end class
var font : Draw@CFont

{
 エントリポイント
}
func Main()
  var status : @Status :: #@Status
  do status.Init()
  var resource : @Resource :: #@Resource
  do resource.Init()

  while ()
    do @Title(resource, status)
    switch (@Game(resource, status))
    case (@Result#Ending)
      do @Ending(resource, status)
    default
      do @GameOver(resource, status)
    end switch
  end while
end func 

{ 簡易フォント描画 }
func DrawText(resource : @Resource, text : []char, size : int, x : int, y : int)
  var texture : Draw@CTex :: resource.Font().MakeTex(size, text, 16)
  do texture.Draw(0.0, 0.0, texture.Width(), texture.Height(), x $ float, y $ float, 1.0, 1.0, 1.0, 1.0)
end func

{ キー解除待ち }
func WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) > 0)
    do Kuin@Act()
  end while
end func

{
  タイトル画面
}
func Title(resource : @Resource, status : @Status)
  do @WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) = 0)
    do @DrawText(resource, "NINJA TITLE", 100, 0, 0)
    do Kuin@Act()
  end while
end func

{
  ゲーム
}
func Game(resource : @Resource, status : @Status) : @Result
  do @WaitForKeyReleased()

  var camera : @Position :: @MakePosition(0.0, 0.0)
  var player : Actor@Actor :: Player@Create(400.0, 800.0)
  do Map@InitMap()
  do PlayerShot@Initialize()
  do Enemy@Initialize()

  for i(0, 9)
    do Enemy@Add(@MakePosition(Rnd@Get(1, Map@width - 1) $ float * Map@blockW, Rnd@Get(1, Map@height - 1) $ float * Map@blockH))
  end for

  const enemyCount : int :: 600
  var enemyCounter : int

  while (Input@Pad(0, Input@EBtn#A) = 0)
    do Player@Action(resource, player)
    do PlayerShot@Action(resource)
    do Enemy@Action(resource)
    const cameraForrowingRangeL : float :: Map@viewW / 4.0
    if (player.position.x < camera.x + cameraForrowingRangeL)
      do camera.x :: player.position.x - cameraForrowingRangeL
    end if
    if (camera.x < 0.0)
      do camera.x :: 0.0
    end if
    const cameraForrowingRangeR : float :: Map@viewW * 3.0 / 4.0
    if (player.position.x >= camera.x + cameraForrowingRangeR)
      do camera.x :: player.position.x - cameraForrowingRangeR
    end if
    const rightLimit : float :: (Map@width $ float) * Map@blockW - Map@viewW
    if (camera.x > rightLimit)
      do camera.x :: rightLimit
    end if

    if (Enemy@enemyList.Len() < 10 & enemyCounter <= 0)
      do enemyCounter :: 10 * 60
      do Enemy@Add(@MakePosition(Rnd@Get(1, Map@width - 1) $ float * Map@blockW, Rnd@Get(1, Map@height - 1) $ float * Map@blockH))
    elif (enemyCounter > 0)
      do enemyCounter :- 1
    end if

    do Map@DrawMap(camera)
    do Enemy@Draw(camera)
    do Player@Draw(player, camera)
    do PlayerShot@Draw(camera)
    do Kuin@Act()
  end while
  return @Result#GameOver
end func

{
  ゲームオーバー
}
func GameOver(resource : @Resource, status : @Status)
  do @WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) = 0)
    do @DrawText(resource, "GAME OVER", 100, 0, 0)
    do Kuin@Act()
  end while
end func

{
  ゲームクリア→エンディング
}
func Ending(resource : @Resource, status : @Status)
  do @WaitForKeyReleased()
  while (Input@Pad(0, Input@EBtn#A) = 0)
    do @DrawText(resource, "Ending", 100, 0, 0)
    do Kuin@Act()
  end while
end func

