{
  敵
}

const width : float :: 100.0
const height : float :: 160.0

const shotSpeed : float :: 16.0

const shotIntervalMin : int :: 30
const shotIntervalArray : []char :: "01223334456"
const shotRange : float :: 700.0
const chasingRange : float :: 600.0

enum Animation
  StopL
  StopR
  WalkL
  WalkR
  JumpL
  JumpR
  HitL
  HitR
end enum

{ Enemy#Update()の結果 }
-enum Result
  Keep   { 要素を維持. }
  Remove { 要素を削除. }
end enum

{ 次弾を投げる間隔を取得する }
func GetShotInterval() : int
  return @shotIntervalMin + (@shotIntervalArray[Rnd@Get(0, @shotIntervalArray.Len() - 1)] $ int - '0' $ int) * 20
end func

{ 敵クラス }
class Enemy(Actor@Actor)
  { 動作状態 }
  enum State
    Entry
    Active
    Dead
  end enum

  { 行動パターン }
  enum Character
    Aggressive { プレイヤーを追う. }
    Stay       { 動かない. }
    Cowardly   { プレイヤーから逃げる. }
  end enum

  var isLanding : bool
  var shotInterval : int
  var character : Character
  var state : State
  var stateCount : int
  var velocityAddition : float
  var velocityMax : float
  var animation : AnimationData@Animation

  -+func Ctor()
    do this.character :: Character#Aggressive
  end func

  { 状態: 出現 }
  -func StateEntry(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList) : @Result
    do this.stateCount :- 1
    if (this.stateCount < 0)
      do this.state :: @Enemy#State#Active
      do this.collisionMask :: this.collisionMask.Or(CollisionGroup@categoryPlayer)
    end if
  end func

  { 状態: 動作中 }
  -func StateActive(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList) : @Result
    var animationIndex : int :: this.animation.index
    if (this.shotInterval > 0)
      do this.shotInterval :- 1
      return this.StateMove(resource, player, shotList)
    else
      var distanceX : float :: player.position.x - this.position.x
      var distanceY : float :: player.position.y - this.position.y
      if (Lib@Hypot(distanceX, distanceY) < @shotRange)
        { kuinのラジアン 左=0.0 下=0.5pi 右 1.0pi 上 1.5pi }
        var direction : float :: Lib@InvRot(distanceX, distanceY)
        var pos : Main@Position :: ##this.position
        do pos.y :- (this.rect.bottom - this.rect.top) * 0.75
        if (direction <= 0.25 * Lib@Pi | direction >= 1.75 * Lib@Pi)
          do this.direction.Set(1.0, 0.0)
          do this.velocityAddition :: 0.0
          do animationIndex :: @Animation#StopR $ int
          do shotList.Add(pos, (##this.direction).MulScalar(@shotSpeed), CollisionGroup@categoryEnemyShot, CollisionGroup@maskEnemyShot, AnimationData@Action#EnemyShot $ int)
          do SE@Play(Main@SEID#EnemyShot $ int)
        elif (direction >= 0.75 * Lib@Pi & direction <= 1.25 * Lib@Pi)
          do this.direction.Set(-1.0, 0.0)
          do this.velocityAddition :: 0.0
          do animationIndex :: @Animation#StopL $ int
          do shotList.Add(pos, (##this.direction).MulScalar(@shotSpeed), CollisionGroup@categoryEnemyShot, CollisionGroup@maskEnemyShot, AnimationData@Action#EnemyShot $ int)
          do SE@Play(Main@SEID#EnemyShot $ int)
        end if
      end if
      do this.shotInterval :: @GetShotInterval()
    end if
    if (animationIndex <> this.animation.index)
      do this.animation.Set(animationIndex)
    else
      do this.animation.Update()
    end if
    return @Result#Keep
  end func

  { 状態: 移動 }
  -func StateMove(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList) : @Result
    if (this.stateCount > 0)
      do this.stateCount :- 1
      do this.velocity.x :+ this.velocityAddition
      if ((this.velocityMax >= 0.0 & this.velocity.x > this.velocityMax) | (this.velocityMax < 0.0 & this.velocity.x < this.velocityMax))
        do this.velocity.x :: this.velocityMax
      end if
      do this.animation.Update()
      return @Result#Keep
    end if
    const countArray : []char :: "12223"
    do this.stateCount :: (countArray[Rnd@Get(0, 4)] $ int - '0' $ int) * 10
    var animationIndex : int :: this.animation.index
    switch character(this.character)
    case (Character#Aggressive)
      var distance2 : Main@Vector2 :: player.position.Sub(this.position)
      var distance : float :: Lib@Hypot(distance2.x, distance2.y)
      var direction : float :: Lib@InvRot(distance2.x, distance2.y)
      if (distance < @chasingRange * 0.6)
        if (Rnd@Get(0, 9) < 6)
          if (direction <= 0.25 * Lib@Pi | direction >= 1.75 * Lib@Pi)
            do this.direction.Set(1.0, 0.0)
            do animationIndex :: @Animation#WalkR $ int
            do this.velocityAddition :: -4.5
            do this.velocityMax :: -8.0
            break character
          elif (direction >= 0.75 * Lib@Pi & direction <= 1.25 * Lib@Pi)
            do this.direction.Set(-1.0, 0.0)
            do animationIndex :: @Animation#WalkL $ int
            do this.velocityAddition :: 4.5
            do this.velocityMax :: 8.0
            break character
          end if
        end if
      elif (distance < @chasingRange)
        if (Rnd@Get(0, 9) < 3)
          if (direction <= 0.25 * Lib@Pi | direction >= 1.75 * Lib@Pi)
            do this.direction.Set(1.0, 0.0)
            do animationIndex :: @Animation#WalkR $ int
            do this.velocityAddition :: 5.0
            do this.velocityMax :: 9.0
            break character
          elif (direction >= 0.75 * Lib@Pi & direction <= 1.25 * Lib@Pi)
            do this.direction.Set(-1.0, 0.0)
            do animationIndex :: @Animation#WalkL $ int
            do this.velocityAddition :: -5.0
            do this.velocityMax :: -9.0
            break character
          end if
        end if
      end if
      do this.velocityAddition :: 0.0
      do this.velocityMax :: 0.0
      do animationIndex :: (this.direction.x >= 0.0 ?(@Animation#StopR, @Animation#StopL)) $ int
    default
      { 何もしない }
    end switch
    if (animationIndex <> this.animation.index)
      do this.animation.Set(animationIndex)
    else
      do this.animation.Update()
    end if
    return @Result#Keep
  end func

  { 状態: 死亡 }
  -func StateDead(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList) : @Result
    do this.stateCount :- 1
    if (this.stateCount < 0)
      return @Result#Remove
    end if
    return @Result#Keep
  end func

  func Update(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList) : @Result
    if (this.isLanding)
      const friction : float :: 4.0
      if (this.velocity.x.Abs() <= friction)
        do this.velocity.x :: 0.0
      else
        if (this.velocity.x < 0.0)
          do this.velocity.x :+ friction
        else
          do this.velocity.x :- friction
        end if
      end if
    end if
    do this.velocity.y  :+ Main@gravity

    var result : Map@CollisionResult :: Map@Collision(this)
    do this.isLanding :: result.isHitY

    switch (this.state)
    case (@Enemy#State#Entry)
      return this.StateEntry(resource, player, shotList)
    case (@Enemy#State#Active)
      return this.StateActive(resource, player, shotList)
    case (@Enemy#State#Dead)
      return this.StateDead(resource, player, shotList)
    end switch
  end func

  func Damaged()
    if (this.state <> State#Dead)
      do this.collisionMask :: this.collisionMask.And(CollisionGroup@maskEnemy.Not())
      do this.state :: State#Dead
      do this.stateCount :: 60
      do this.animation.Set((this.direction.x >= 0.0 ?(@Animation#HitR, @Animation#HitL)) $ int)
      do this.velocity.x  :+ this.direction.x * -30.0
      do SE@Play(Main@SEID#Dead $ int)
    end if
  end func
end class

{ 出現敵リスト }
class EnemyList()
  var enemyList : Actor@List
  var animationData : AnimationData@Data
  var texture : Draw@CTex

  { 初期化 }
  func Initialize()
    do this.enemyList :: #Actor@List
    try
    do this.animationData :: AnimationData@Load("enemy.knanm")
    do this.texture :: Draw@LoadTex(this.animationData.textureName)
    catch()
      do Dbg@Log("ERROR: Can't load enemy data")
    end try
  end func

  { 現在の出現数 }
  func Len() : int
    return this.enemyList.Len()
  end func

  { 敵出現 }
  func Add(position : Main@Position)
    var enemy : @Enemy :: #@Enemy
    var rect : Main@Rect :: Main@MakeRect(-(@width * 0.8 / 2.0), -(@height * 0.9), @width * 0.8 / 2.0, 0.0)
    do (enemy $ Actor@Actor).Initialize(position, rect)
    do enemy.shotInterval :: @GetShotInterval()
    do enemy.state :: @Enemy#State#Entry
    do enemy.stateCount :: 30
    if (Main@stage < 3)
      do enemy.character :: @Enemy#Character#Stay
    else
      do enemy.character :: Rnd@Get(0, Main@stage) >= 3 ?(@Enemy#Character#Aggressive, @Enemy#Character#Stay)
    end if
    do enemy.animation :: AnimationData@MakeAnimation(this.animationData, this.texture, @Animation#StopL $ int)
    do enemy.direction.Set(-1.0, 0.0)
    do Main@SetColorRGBA(&enemy.color, 0.0, 1.0, 0.0, 1.0)
    do enemy.category :: CollisionGroup@categoryEnemy
    do enemy.collisionMask :: CollisionGroup@maskEnemy.And(CollisionGroup@categoryPlayer.Not())
    do this.enemyList.Add(enemy)
  end func

  { 敵リスト更新 }
  func Action(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList)
    do this.enemyList.Head()
    while loop(!this.enemyList.ChkEnd())
      var enemy : @Enemy :: this.enemyList.Get() $ @Enemy
      var result : @Result :: enemy.Update(resource, player, shotList)
      if (result = @Result#Remove)
        do this.enemyList.Del()
      else
        do this.enemyList.Next()
      end if
    end while
  end func

  { 敵リスト描画 }
  func Draw(camera : Main@Position)
    do this.enemyList.Head()
    while (!this.enemyList.ChkEnd())
      var enemy : @Enemy :: this.enemyList.Get() $ @Enemy
      if (enemy.state = @Enemy#State#Active | enemy.stateCount % 2 = 0)
        var x : float :: enemy.position.x - camera.x
        var y : float :: enemy.position.y - camera.y
        do enemy.animation.Draw(x, y)
      end if
      do this.enemyList.Next()
    end while
  end func

  { 全消去 }
  func Clear()
    do this.enemyList.Head()
    while (!this.enemyList.ChkEnd())
      do this.enemyList.Del()
    end while
  end func
end class

func Create() : @EnemyList
  var enemyList : @EnemyList :: #@EnemyList
  do enemyList.Initialize()
  return enemyList
end func
