{
  敵
}

const width : float :: 100.0
const height : float :: 160.0

const shotSpeed : float :: 16.0

const shotIntervalMin : int :: 20
const shotIntervalMax : int :: 100
const shotRange : float :: 800.0

{ 次弾を投げる間隔を取得する }
func GetShotInterval() : int
  return Rnd@Get(@shotIntervalMin, @shotIntervalMax)
end func

{ 敵クラス }
class Enemy(Actor@Actor)
  var shotInterval : int
  var animation : AnimationData@Animation
end class

{ 出現敵リスト }
class EnemyList()
  var enemyList : Actor@List
  var animationData : AnimationData@Data
  var texture : Draw@CTex

  { 初期化 }
  func Initialize()
    do this.enemyList :: #Actor@List
    try
    do this.animationData :: AnimationData@Load("enemy.knanm")
    do this.texture :: Draw@LoadTex(this.animationData.textureName)
    catch()
      do Dbg@Log("ERROR: Can't load enemy data")
    end try
  end func

  { 現在の出現数 }
  func Len() : int
    return this.enemyList.Len()
  end func

  { 敵出現 }
  func Add(position : Main@Position)
    var enemy : @Enemy :: #@Enemy
    var rect : Main@Rect :: Main@MakeRect(-(@width * 0.8 / 2.0), -(@height * 0.9), @width * 0.8 / 2.0, 0.0)
    do (enemy $ Actor@Actor).Initialize(position, rect)
    do enemy.shotInterval :: @shotIntervalMax
    do enemy.animation :: AnimationData@MakeAnimation(this.animationData, this.texture, AnimationData@Action#EnemyL $ int)
    do Main@SetColorRGBA(&enemy.color, 0.0, 1.0, 0.0, 1.0)
    do this.enemyList.Add(enemy)
  end func

  { 敵リスト更新 }
  func Action(resource : Main@Resource, player : Actor@Actor, shotList : Shot@ShotList)
    do this.enemyList.Head()
    while (!this.enemyList.ChkEnd())
      var enemy : @Enemy :: this.enemyList.Get() $ @Enemy
      do enemy.velocity.y  :+ Main@gravity
      var result : Map@CollisionResult :: Map@Collision(enemy)
      if (enemy.shotInterval > 0)
        do enemy.shotInterval :- 1
      else
        var distanceX : float :: player.position.x - enemy.position.x
        var distanceY : float :: player.position.y - enemy.position.y
        if (Lib@Hypot(distanceX, distanceY) < @shotRange)
          { kuinのラジアン 左=0.0 下=0.5pi 右 1.0pi 上 1.5pi }
          var direction : float :: Lib@InvRot(distanceX, distanceY)
          var pos : Main@Position :: ##enemy.position
          do pos.y :- (enemy.rect.bottom - enemy.rect.top) * 0.75
          if (direction <= 0.25 * Lib@Pi | direction >= 1.75 * Lib@Pi)
            do enemy.direction.Set(1.0, 0.0)
            do enemy.animation.Set(AnimationData@Action#EnemyL $ int)
            do shotList.Add(pos, (##enemy.direction).MulScalar(@shotSpeed))
          elif (direction >= 0.75 * Lib@Pi | direction <= 1.25 * Lib@Pi)
            do enemy.direction.Set(-1.0, 0.0)
            do enemy.animation.Set(AnimationData@Action#EnemyR $ int)
            do shotList.Add(pos, (##enemy.direction).MulScalar(@shotSpeed))
          end if
        end if
        do enemy.shotInterval :: @GetShotInterval()
        do enemy.animation.Update()
      end if
      do this.enemyList.Next()
    end while
  end func

  { 敵リスト描画 }
  func Draw(camera : Main@Position)
    do this.enemyList.Head()
    while (!this.enemyList.ChkEnd())
      var enemy : @Enemy :: this.enemyList.Get() $ @Enemy
      var x : float :: enemy.position.x - camera.x
      var y : float :: enemy.position.y - camera.y
      do enemy.animation.Draw(x, y)
      do this.enemyList.Next()
    end while
  end func
end class

func Create() : @EnemyList
  var enemyList : @EnemyList :: #@EnemyList
  do enemyList.Initialize()
  return enemyList
end func
