{
  マップデータ
}

const viewW : float :: 1600.0
const viewH : float :: 900.0
const blockW : float :: 100.0
const blockH : float :: 100.0
const width : int :: 16 * 2
const height : int :: 9

var data : [][]char

func InitMap()
  do @data :: #[@height][]char
  do @data[0] :: "................"~"................"
  do @data[1] :: "................"~"..........XX...."
  do @data[2] :: ".......XX......."~"....XXXX..XXXXXX"
  do @data[3] :: "..........XXX..."~"....XXXX........"
  do @data[4] :: ".............XXX"~"..XXX...X......."
  do @data[5] :: "................"~"....X...XXXX...."
  do @data[6] :: "........XX...XXX"~"XXXXXXX........."
  do @data[7] :: "....XX..XXXX...."~"....X.........XX"
  do @data[8] :: "XXXXXXXXXXXXXXXX"~"XXXXXXXXXXXXXXXX"
end func

func DrawMap(camera : Main@Position)
  var rangeL : int :: ((camera.x / @blockW) $ int) - 1
  if (rangeL < 0)
    do rangeL :: 0
  end if
  var rangeR : int :: rangeL + 17
  if (rangeR > @width - 1)
    do rangeR :: @width - 1
  end if
{
  do Dbg@Log("rangeL" ~ rangeL.ToStr())
  do Dbg@Log("rangeR" ~ rangeR.ToStr())
}
  for x(rangeL, rangeR)
    for y(0, @height - 1)
      if (@data[y][x] = 'X')
        var left : float :: (x $ float) * @blockW - camera.x
        var top : float :: (y $ float) * @blockH - camera.y
        do Draw@Rect(left, top, @blockW, @blockH, 1.0, 1.0, 1.0, 1.0)
      end if
    end for
  end for
end func

func CorrectInt(n : int, min : int, max : int) : int
  if (n < min)
    return min
  elif (n >= max)
    return max - 1
  end if
  return n
end func

{
  背景の当たり判定

  移動方向にある障害物を考慮した移動量を返す
}
func Collision(rect : Main@Rect, velocity: Main@Vector2) : Main@Vector2
  { 当たり判定を行う範囲を決める }
  var left : int :: @CorrectInt(((rect.left + velocity.x - @blockW) / @blockW) $ int, 0, @width)
  var top : int :: @CorrectInt(((rect.top + velocity.y - @blockH) / @blockH) $ int, 0, @height)
  var right : int :: @CorrectInt(((rect.right + velocity.x + @blockW) / @blockW) $ int, 0, @width)
  var bottom : int :: @CorrectInt(((rect.bottom + velocity.y + @blockH) / @blockH) $ int, 0, @height)

  { 移動方向のみ当たり判定を行う }
  var newVelocity : Main@Vector2 :: ##velocity
  if (velocity.x < 0.0)
    var x : int :: left
    for y(top, bottom)
      if (@data[y][x] = 'X')
        var blockRight : float :: (x + 1) $ float * @blockW
        if (rect.left + velocity.x < blockRight)
          do newVelocity.x ::  blockRight - rect.left
          break y
        end if
      end if
    end for
  end if
  if (velocity.x >= 0.0)
    var x : int :: right
    for y(top, bottom)
      if (@data[y][x] = 'X')
        var blockLeft : float :: x $ float * @blockW
        if (rect.right + velocity.x > blockLeft)
          do newVelocity.x :: rect.right - blockLeft
          break y
        end if
      end if
    end for
  end if

  if (velocity.y < 0.0)
    var y : int :: left
    for x(left, right)
      if (@data[y][x] = 'X')
        var blockTop : float :: y $ float * @blockH
        if (rect.top + velocity.y < blockTop)
          do newVelocity.y :: blockTop - rect.top
          break x
        end if
      end if
    end for
  end if
  if (velocity.y >= 0.0)
    var y : int :: right
    for x(left, right)
      if (@data[y][x] = 'X')
        var blockBottom : float :: y $ float * @blockH
        if (rect.bottom + velocity.y > blockBottom)
          do newVelocity.y :: rect.bottom - blockBottom
          break x
        end if
      end if
    end for
  end if
  return newVelocity
end func
