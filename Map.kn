{
  マップデータ
}

const viewW : float :: 1600.0
const viewH : float :: 900.0
const blockW : float :: 100.0
const blockH : float :: 100.0
const width : int :: 16 * 2
const height : int :: 9 * 2

var data : [][]char
var tex : Draw@CTex

{
  . 空白
  0 岩棚
  1 岩
  2 岩下
  3 岩棚下
}
func InitMap()
  do @data :: #[@height][]char
  do @data[ 0] :: "................"~"................"
  do @data[ 1] :: "................"~"...........30..."
  do @data[ 2] :: "330............."~"............233."
  do @data[ 3] :: "..233..........."~"....0333........"
  do @data[ 4] :: "................"~"..032..........."
  do @data[ 5] :: ".......00...3333"~"332......333...."
  do @data[ 6] :: "......0223......"~"................"
  do @data[ 7] :: "...0332........."~"..............00"
  do @data[ 8] :: "3332.......00333"~"33.303333....321"
  do @data[ 9] :: "..........022..."~"....1..........1"
  do @data[10] :: "..........1....."~"....1.....30...1"
  do @data[11] :: ".......3332....."~"....1......23301"
  do @data[12] :: ".033............"~"....1...0.....21"
  do @data[13] :: "02.............."~".0332...1......1"
  do @data[14] :: "1.....00....3333"~"32.....32333...1"
  do @data[15] :: "1.....1100......"~"...............1"
  do @data[16] :: "10...011110....."~"....00........01"
  do @data[17] :: "1100011111100000"~"0000110000000011"
  do @tex :: Draw@LoadTex("player.kntex")
end func

func DrawMap(camera : Main@Position)
  var rangeL : int :: ((camera.x / @blockW) $ int) - 1
  if (rangeL < 0)
    do rangeL :: 0
  end if
  var rangeR : int :: rangeL + (@viewW / @blockW) $ int + 1
  if (rangeR > @width - 1)
    do rangeR :: @width - 1
  end if
  var rangeT : int :: ((camera.y / @blockH) $ int) - 1
  if (rangeT < 0)
    do rangeT :: 0
  end if
  var rangeB : int :: rangeT + (@viewH / @blockH) $ int + 1
  if (rangeB > @height - 1)
    do rangeB :: @height - 1
  end if

  for x(rangeL, rangeR)
    for y(rangeT, rangeB)
      var c : char :: @data[y][x]
      if (c <> '.')
        var left : float :: (x $ float) * @blockW - camera.x
        var top : float :: (y $ float) * @blockH - camera.y
        if (@tex =& null)
          do Draw@Rect(left, top, @blockW, @blockH, 1.0, 1.0, 1.0, 1.0)
        else
          var id : int :: c $ int - '0' $ int
          do @tex.Draw(id $ float * @blockW, 0.0, @blockW, @blockH, left, top, 1.0, 1.0, 1.0, 1.0)
        end if
      end if
    end for
  end for
end func

func CorrectInt(n : int, min : int, max : int) : int
  if (n < min)
    return min
  elif (n >= max)
    return max - 1
  end if
  return n
end func

class CollisionResult()
  var isHitX : bool
  var isHitY : bool
end class

func MakeCollisionResult() : @CollisionResult
  var result : @CollisionResult :: #@CollisionResult
  return result
end func

func CalcRectInt(left : float, top : float, right : float, bottom : float) : Main@RectInt
  var l : int :: @CorrectInt((left / @blockW) $ int, 0, @width)
  var t : int :: @CorrectInt((top / @blockH) $ int, 0, @height)
  var r : int :: @CorrectInt((right / @blockW) $ int, 0, @width)
  var b : int :: @CorrectInt((bottom / @blockH) $ int, 0, @height)
  return Main@MakeRectInt(l, t, r, b)
end func

func IsCollisionY(rect : Main@Rect, y : int) : bool
  var blockTop : float :: y $ float * @blockH
  if (blockTop >= rect.bottom)
    return true
  end if
  var blockBottom : float :: (y + 1) $ float * @blockH
  if (blockBottom < rect.top)
    return true
  end if
  return false
end func

func IsCollisionX(rect : Main@Rect, x : int) : bool
  var blockLeft : float :: x $ float * @blockW
  if (blockLeft >= rect.right)
    return true
  end if
  var blockRight : float :: (x + 1) $ float * @blockW
  if (blockRight < rect.left)
    return true
  end if
  return false
end func

{
  背景の当たり判定

  移動方向にある障害物を考慮した移動量を返す
}
func Collision(actor : Actor@Actor) : @CollisionResult
  { 当たり判定を行う範囲を決める }
  var rect : Main@Rect :: ##actor.rect
  do rect.left :+ actor.position.x
  do rect.top :+ actor.position.y
  do rect.right :+ actor.position.x
  do rect.bottom :+ actor.position.y

  { 移動方向のみ当たり判定を行う }
  var result : @CollisionResult :: @MakeCollisionResult()
  if (actor.velocity.x < 0.0)
    var r : Main@RectInt :: @CalcRectInt(rect.left + actor.velocity.x, rect.top, rect.left, rect.bottom)
    for x(r.right, r.left, -1)
      for y(r.top, r.bottom)
        if (@data[y][x] = '.')
          continue y
        end if
        if (@IsCollisionY(rect, y))
          continue y
        end if
        var blockRight : float :: (x + 1) $ float * @blockW
        if (rect.left + actor.velocity.x < blockRight)
          do actor.position.x :: blockRight - actor.rect.left
          do actor.velocity.x :: 0.0
          do result.isHitX :: true
          break x
        end if
      end for
    end for
  end if
  if (actor.velocity.x >= 0.0)
    var r : Main@RectInt :: @CalcRectInt(rect.right, rect.top, rect.right + actor.velocity.x, rect.bottom)
    for x(r.left, r.right)
      for y(r.top, r.bottom)
        if (@data[y][x] = '.')
          continue y
        end if
        if (@IsCollisionY(rect, y))
          continue y
        end if
        var blockLeft : float :: x $ float * @blockW
        if (rect.right + actor.velocity.x >= blockLeft)
          do actor.position.x :: blockLeft - actor.rect.right 
          do actor.velocity.x :: 0.0
          do result.isHitX :: true
          break x
        end if
      end for
    end for
  end if

  if (actor.velocity.y < 0.0)
    var r : Main@RectInt :: @CalcRectInt(rect.left, rect.top + actor.velocity.y, rect.right, rect.top)
    for y(r.bottom, r.top, -1)
      for x(r.left, r.right)
        if (@data[y][x] = '.')
          continue x
        end if
        if (@IsCollisionX(rect, x))
          continue x
        end if
        var blockBottom : float :: (y + 1) $ float * @blockH
        if (rect.top + actor.velocity.y < blockBottom)
          do actor.position.y :: blockBottom - actor.rect.top
          do actor.velocity.y :: 0.0
          do result.isHitY :: true
          break y
        end if
      end for
    end for
  end if
  if (actor.velocity.y >= 0.0)
    var r : Main@RectInt :: @CalcRectInt(rect.left, rect.bottom, rect.right, rect.bottom + actor.velocity.y)
    for y(r.top, r.bottom)
      for x(r.left, r.right)
        if (@data[y][x] = '.')
          continue x
        end if
        if (@IsCollisionX(rect, x))
          continue x
        end if
        var blockTop : float :: y $ float * @blockH
        if (rect.bottom + actor.velocity.y >= blockTop)
          do actor.position.y :: blockTop - actor.rect.bottom
          do actor.velocity.y :: 0.0
          do result.isHitY :: true
          break y
        end if
      end for
    end for
  end if

  do actor.position.Add(actor.velocity)
  return result
end func
