{
  アニメーションデータ

  テクスチャ名, [ 枚数, { 範囲, 反転フラグ, 回転, オフセット, フレーム数 }, ... ], ...
}

enum Flag
  None :: 0
  FlipH :: 1
  FlipV :: 2
  Loop :: 4
  Interpolation :: 8
end enum

class Picture()
  var left : float
  var top : float
  var right : float
  var bottom : float
  var x : float
  var y : float
  var rad : float
  var frames : byte16
  var flags : byte16

  func SetRect(left : float, top : float, right : float, bottom : float)
    do this.left :: left
    do this.top :: top
    do this.right :: right
    do this.bottom :: bottom
  end func
  func SetOffset(x : float, y : float)
    do this.x :: x
    do this.y :: y
  end func
end class

class Data()
  var textureName : []char
  var patternOffset : []int
  var patternSize : []int
  var pictureList : []@Picture

  func GetPatterns(index : int) : []@Picture
    return this.pictureList.Sub(this.patternOffset[index], this.patternSize[index])
  end func
end class

class Animation()
  var data : @Data
  var tex : Draw@CTex
  var pictureList : []@Picture
  var index :int
  var offset : int
  var frames : int

  func Animation(data : @Data, tex : Draw@CTex, index : int) : @Animation
    do this.data :: data
    do this.tex :: tex
    do this.pictureList :: null
    do this.index :: 0
    do this.offset :: 0
    do this.frames :: 0
    do this.Set(index)
    return this
  end func

  func Set(index : int)
    if (index < 0 | index >= this.data.patternOffset.Len())
      return
    end if
    do this.pictureList :: this.data.pictureList.Sub(this.data.patternOffset[index], this.data.patternSize[index])
    do this.index :: index
    do this.offset :: 0
    do this.frames :: 0
  end func

  func Update()
    if (this.offset >= this.pictureList.Len())
      do Dbg@Log("WARNING in Update(): animation offset violation.")
      return
    end if
    do this.frames :+ 1
    if (this.frames >= this.pictureList[this.offset].frames $ int)
      do this.frames :: 0
      do this.offset :+ 1
      if (this.offset >= this.pictureList.Len())
        do this.offset :: 0
      end if
    end if
  end func

  func Draw(x : float, y : float)
    if (this.data =& null | this.tex =& null)
      return
    end if
    if (this.offset >= this.pictureList.Len())
      do Dbg@Log("WARNING in Draw(): animation offset violation.")
      return
    end if
    var pic : @Picture :: this.pictureList[this.offset]
    if (pic =& null)
      return
    end if
    var dx : float :: x + pic.x
    var dy : float :: y + pic.y
    var sw : float :: pic.right - pic.left
    var sh : float :: pic.bottom - pic.top
    var dw : float :: sw
    var dh : float :: sh
    if (pic.flags.And(@Flag#FlipH $ byte16) $ bool)
      do dx :+ sw
      do dw :* -1.0
    end if
    var cx : float :: -pic.x
    var cy : float :: -pic.y
    var rad : float :: pic.rad
    if (pic.flags.And(@Flag#Interpolation $ byte16) $ bool & this.offset + 1 < this.pictureList.Len())
      var pic1 : @Picture :: this.pictureList[this.offset + 1]
      var dx1 : float :: x + pic1.x
      var dy1 : float :: y + pic1.y
      var sw1 : float :: pic1.right - pic1.left
      var sh1 : float :: pic1.bottom - pic1.top
      var dw1 : float :: sw
      var dh1 : float :: sh
      if (pic.flags.And(@Flag#FlipH $ byte16) $ bool) { 反転フラグは常にoffsetのピクチャを参照する }
        do dx1 :+ sw
        do dw1 :* -1.0
      end if
      var cx1 : float :: -pic1.x
      var cy1 : float :: -pic1.y
      var ratio : float :: this.frames $ float / pic.frames $ float
      do dx :+ (dx1 - dx) * ratio
      do dy :+ (dy1 - dy) * ratio
      do sw :+ (sw1 - sw) * ratio
      do sh :+ (sh1 - sh) * ratio
      do dw :+ (dw1 - dw) * ratio
      do dh :+ (dh1 - dh) * ratio
      do cx :+ (cx1 - cx) * ratio
      do cy :+ (cy1 - cy) * ratio
      do rad :+ (pic1.rad - rad) * ratio
    end if
    do this.tex.DrawRot(pic.left, pic.top, sw, sh, dx, dy, dw, dh, cx, cy, rad, 1.0, 1.0, 1.0, 1.0)
    ifdef (dbg)
      do Draw@Rect(x - 20.0, y - 1.0, 40.0, 2.0, 0.3, 0.5, 1.0, 0.8)
      do Draw@Rect(x - 1.0, y - 20.0, 2.0, 40.0, 0.3, 0.5, 1.0, 0.8)
    end ifdef
  end func
end class

func MakeAnimation(data : @Data, tex : Draw@CTex, index : int) : @Animation
  return (#@Animation).Animation(data, tex, index)
end func

enum Action
  StopL
  StopR
  RunL
  RunR
  JumpL
  JumpR
  FallL
  FallR
  ShotL
  ShotR
  ShotU
  ShotD
  EnemyL
  EnemyR
  EnemyHitL
  EnemyHitR
  EnemyShot
end enum

func Load(path : []char) : @Data
  var data : @Data :: #@Data
  do data.textureName :: "player.kntex"
  {                           0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 }
  do data.patternOffset :: [  0,  1,  2,  6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]int
  do data.patternSize ::   [  1,  1,  4,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2]int
  do data.pictureList :: #[24]@Picture
  for i(0, 17)
    do data.pictureList[i] :: #@Picture
    do data.pictureList[i].SetRect(128.0, 128.0, 256.0, 288.0)
    do data.pictureList[i].SetOffset(-64.0, -160.0)
    do data.pictureList[i].rad :: 0.0
    do data.pictureList[i].frames :: 10 $ byte16
    do data.pictureList[i].flags :: 0 $ byte16
  end for
  do data.pictureList[data.patternOffset[@Action#StopR $ int] + 0].SetRect(0.0, 128.0, 128.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#StopL $ int] + 0].SetRect(0.0, 128.0, 128.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#StopL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#JumpL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#FallL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#ShotL $ int]].SetRect(0.0, 320.0, 32.0, 332.0)
  do data.pictureList[data.patternOffset[@Action#ShotL $ int]].SetOffset(-16.0, -6.0)
  do data.pictureList[data.patternOffset[@Action#ShotL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#ShotR $ int]].SetRect(0.0, 320.0, 32.0, 332.0)
  do data.pictureList[data.patternOffset[@Action#ShotR $ int]].SetOffset(-16.0, -6.0)
  do data.pictureList[data.patternOffset[@Action#ShotU $ int]].SetRect(0.0, 320.0, 32.0, 332.0)
  do data.pictureList[data.patternOffset[@Action#ShotU $ int]].SetOffset(-16.0, -6.0)
  do data.pictureList[data.patternOffset[@Action#ShotU $ int]].rad :: 4.75
  do data.pictureList[data.patternOffset[@Action#ShotD $ int]].SetRect(0.0, 320.0, 32.0, 332.0)
  do data.pictureList[data.patternOffset[@Action#ShotD $ int]].SetOffset(-16.0, -6.0)
  do data.pictureList[data.patternOffset[@Action#ShotD $ int]].rad :: 1.5

  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 0].SetRect(128.0, 128.0, 256.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 0].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 0].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 1].SetRect(256.0, 128.0, 384.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 1].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 1].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 2].SetRect(384.0, 128.0, 512.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 2].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 2].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 3].SetRect(512.0, 128.0, 640.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 3].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 3].frames :: 8 $ byte16

  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 0].SetRect(128.0, 128.0, 256.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 0].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 1].SetRect(256.0, 128.0, 384.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 1].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 2].SetRect(384.0, 128.0, 512.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 2].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 3].SetRect(512.0, 128.0, 640.0, 288.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 3].frames :: 8 $ byte16

  var el : @Picture :: #@Picture
  do el.SetRect(100.0, 340.0, 200.0, 500.0)
  do el.SetOffset(-50.0, -160.0)
  do el.frames :: 8 $ byte16
  do el.flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#EnemyL $ int]] :: el

  var er : @Picture :: #@Picture
  do er.SetRect(100.0, 340.0, 200.0, 500.0)
  do er.SetOffset(-50.0, -160.0)
  do er.frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#EnemyR $ int]] :: er

  var ehl : @Picture :: #@Picture
  do ehl.SetRect(200.0, 340.0, 300.0, 500.0)
  do ehl.SetOffset(-50.0, -160.0)
  do ehl.frames :: 8 $ byte16
  do ehl.flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#EnemyHitL $ int]] :: ehl

  var ehr : @Picture :: #@Picture
  do ehr.SetRect(200.0, 340.0, 300.0, 500.0)
  do ehr.SetOffset(-50.0, -160.0)
  do ehr.frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#EnemyHitR $ int]] :: ehr

  for i(0, 1)
    var shot : @Picture :: #@Picture
    do shot.SetRect(0.0, 334.0, 17.0, 351.0)
    do shot.SetOffset(-(17.0 / 2.0), -(17.0 / 2.0))
    do shot.frames :: 4 $ byte16
    do shot.rad :: 1.0 * i $ float
    do shot.flags :: @Flag#Interpolation $ byte16
    do data.pictureList[data.patternOffset[@Action#EnemyShot $ int] + i] :: shot
  end for

  return data
end func
