{
  アニメーションデータ

  テクスチャ名, [ 枚数, { 範囲, 反転フラグ, 回転, オフセット, フレーム数 }, ... ], ...
}

enum Flag
  None :: 0
  FlipH :: 1
  FlipV :: 2
  Loop :: 4
end enum

class Picture()
  var left : float
  var top : float
  var right : float
  var bottom : float
  var x : float
  var y : float
  var rad : float
  var frames : byte16
  var flags : byte16

  func SetRect(left : float, top : float, right : float, bottom : float)
    do this.left :: left
    do this.top :: top
    do this.right :: right
    do this.bottom :: bottom
  end func
  func SetOffset(x : float, y : float)
    do this.x :: x
    do this.y :: y
  end func
end class

class Data()
  var textureName : []char
  var patternOffset : []int
  var patternSize : []int
  var pictureList : []@Picture

  func GetPatterns(index : int) : []@Picture
    return this.pictureList.Sub(this.patternOffset[index], this.patternSize[index])
  end func
end class

class Animation()
  var data : @Data
  var tex : Draw@CTex
  var pictureList : []@Picture
  var index :int
  var offset : int
  var frames : int

  func Animation(data : @Data, tex : Draw@CTex, index : int) : @Animation
    do this.data :: data
    do this.tex :: tex
    do this.pictureList :: null
    do this.index :: 0
    do this.offset :: 0
    do this.frames :: 0
    do this.Set(index)
    return this
  end func

  func Set(index : int)
    if (index < 0 | index >= this.data.patternOffset.Len())
      return
    end if
    do this.pictureList :: this.data.pictureList.Sub(this.data.patternOffset[index], this.data.patternSize[index])
    do this.index :: index
    do this.offset :: 0
    do this.frames :: 0
  end func

  func Update()
    if (this.offset >= this.pictureList.Len())
      do Dbg@Log("WARNING in Update(): animation offset violation.")
      return
    end if
    do this.frames :+ 1
    if (this.frames >= this.pictureList[this.offset].frames $ int)
      do this.frames :: 0
      do this.offset :+ 1
      if (this.offset >= this.pictureList.Len())
        do this.offset :: 0
      end if
    end if
  end func

  func Draw(x : float, y : float)
    if (this.data =& null | this.tex =& null)
      return
    end if
    if (this.offset >= this.pictureList.Len())
      do Dbg@Log("WARNING in Draw(): animation offset violation.")
      return
    end if
    var pic : @Picture :: this.pictureList[this.offset]
    if (pic =& null)
      return
    end if
    do x :+ pic.x
    do y :+ pic.y
    var sw : float :: pic.right - pic.left
    var sh : float :: pic.bottom - pic.top
    var dw : float :: sw
    var dh : float :: sh
    if (pic.flags.And(@Flag#FlipH $ byte16) $ int > 0)
      do x :+ sw
      do dw :* -1.0
    end if
    do this.tex.DrawScale(pic.left, pic.top, sw, sh, x, y, dw, dh, 1.0, 1.0, 1.0, 1.0)
  end func
end class

func MakeAnimation(data : @Data, tex : Draw@CTex, index : int) : @Animation
  return (#@Animation).Animation(data, tex, index)
end func

enum Action
  StopL
  StopR
  RunL
  RunR
  JumpL
  JumpR
  FallL
  FallR
  ShotL
  ShotR
  EnemyL
  EnemyR
end enum

func Load(path : []char) : @Data
  var data : @Data :: #@Data
  do data.textureName :: "player.kntex"
  do data.patternOffset :: [ 0, 1, 2, 6, 10, 11, 12, 13, 14, 15, 16, 17]int
  do data.patternSize ::   [ 1, 1, 4, 4,  1,  1,  1,  1,  1,  1,  1,  1]int
  do data.pictureList :: #[18]@Picture
  for i(0, 15)
    do data.pictureList[i] :: #@Picture
    do data.pictureList[i].SetRect(300.0, 140.0, 400.0, 300.0)
    do data.pictureList[i].SetOffset(-50.0, -160.0)
    do data.pictureList[i].rad :: 0.0
    do data.pictureList[i].frames :: 10 $ byte16
    do data.pictureList[i].flags :: 0 $ byte16
  end for
  do data.pictureList[data.patternOffset[@Action#StopR $ int] + 0].SetRect(200.0, 140.0, 300.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#StopL $ int] + 0].SetRect(200.0, 140.0, 300.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#StopL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#JumpL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#FallL $ int]].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#ShotL $ int]].flags :: @Flag#FlipH $ byte16

  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 0].SetRect(300.0, 140.0, 400.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 0].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 0].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 1].SetRect(400.0, 140.0, 500.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 1].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 1].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 2].SetRect(500.0, 140.0, 600.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 2].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 2].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 3].SetRect(600.0, 140.0, 700.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 3].flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#RunL $ int] + 3].frames :: 8 $ byte16

  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 0].SetRect(300.0, 140.0, 400.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 0].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 1].SetRect(400.0, 140.0, 500.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 1].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 2].SetRect(500.0, 140.0, 600.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 2].frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 3].SetRect(600.0, 140.0, 700.0, 300.0)
  do data.pictureList[data.patternOffset[@Action#RunR $ int] + 3].frames :: 8 $ byte16

  var el : @Picture :: #@Picture
  do el.SetRect(100.0, 340.0, 200.0, 500.0)
  do el.SetOffset(-50.0, -160.0)
  do el.frames :: 8 $ byte16
  do el.flags :: @Flag#FlipH $ byte16
  do data.pictureList[data.patternOffset[@Action#EnemyL $ int]] :: el

  var er : @Picture :: #@Picture
  do er.SetRect(100.0, 340.0, 200.0, 500.0)
  do er.SetOffset(-50.0, -160.0)
  do er.frames :: 8 $ byte16
  do data.pictureList[data.patternOffset[@Action#EnemyR $ int]] :: er

  return data
end func
